//
// Main FBS file
//
include "Types.fbs";

namespace creator.buffers;


enum FontType:byte { System = 0, BMFont = 1, TTF = 2 }
enum VerticalAlignment:byte { Top = 0, Center = 1, Bottom = 2 }
enum HorizontalAlignment:byte { Left = 0, Center = 1, Right = 2 }
enum SpriteType:byte {Simple, Sliced, Tiled, Filled}
enum SpriteFillType:byte {Horizontal, Vertical, Radial}
enum SpriteSizeMode:byte {Custom, Trimmed, Raw}
enum ScrollViewDirection:byte {None, Vertical, Horizontal, Both}
enum EditBoxReturnType:byte {Default, Done, Send, Search, Go}
enum EditBoxInputFlag:byte {Password, Sensitive, InitialCapsWord, InitialCapsSentence, InitialCapsAllCharacters, LowercaseAllCharacters}
enum EditBoxInputMode:byte {Any, EmailAddress, Numeric, PhoneNumber, URL, Decime, SingleLine}
enum LabelOverflowType:byte {None, Clamp, Shrink, ResizeHeight, Toggle}
enum MaskType:byte {Rect, Ellipse, ImageStencil}
enum ColliderType:byte {BoxCollider, PolygonCollider, CircleCollider}
enum LayoutType:byte { None = 0, Horizontal = 1, Vertical = 2, Grid = 3 }
enum ResizeMode:byte { None = 0, Container = 1, Children = 2 }
enum AxisDirection:byte { Horizontal = 0, Vertical = 1 }
enum VerticalDirection:byte { BottomToTop = 0, TopToBottom = 1 }
enum HorizontalDirection:byte { LeftToRight = 0, RightToLeft = 1 }

// New nodes should be added at the end of the union
// no more than 255 union objects can be added
union AnyNode {
    Scene, 
    Sprite, 
    Label, 
    Particle, 
    TileMap, 
    Node, 
    Button, 
    ProgressBar, 
    ScrollView, 
    CreatorScene, 
    EditBox, 
    RichText, 
    SpineSkeleton, 
    VideoPlayer, 
    WebView, 
    Slider, 
    Toggle,
    ToggleGroup, 
    PageView, 
    Mask,
    DragonBones, 
    MotionStreak, 
    Prefab,
    Layout
}

//table SceneGraph
table NodeGraph
{
    version:                string;
    root:                   NodeTree;
    designResolution:       Size;
    resolutionFitWidth:     bool = false;
    resolutionFitHeight:    bool = false;

    // Frames needed for the Scene
    spriteFrames:           [SpriteFrame];

    // flabuffer doesn't support array of array
    // so use a new table to store the values
    collisionMatrix:        [CollisionLine];
}

table CollisionLine
{
    value:  [bool];
}

table NodeTree
{
    // Flatbuffers doesn't support array of unions
    // so split the tree from node
    children:   [NodeTree];
    object:     AnyNode;

    // no need to declare it, but required everytime that
    // object_type:string;
}

table SpriteFrame
{
    name:           string;
    texturePath:    string;
    rect:           Rect;
    offset:         Vec2;
    rotated:        bool;
    originalSize:   Size;
    centerRect:     Rect;        // rect in pixels. top-left origin
    atlas:          bool = false;
}

table CreatorScene
{
    // fbs file. An fbs can contain another fbs
    filename:   string;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//
// Nodes
//
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
table Node
{
    contentSize:            Size;
    enabled:                bool = true;
    name:                   string;
    anchorPoint:            Vec2;
    cascadeOpacityEnabled:  bool = true;
    color:                  ColorRGB;
    globalZOrder:           float = 0;
    localZOrder:            int = 0;
    opacity:                ubyte = 255;
    opacityModifyRGB:       bool = true;
    position:               Vec3;
    rotationSkewX:          float = 0;
    rotationSkewY:          float = 0;
    scaleX:                 float = 1;
    scaleY:                 float = 1;
    skewX:                  float = 0;
    skewY:                  float = 0;
    tag:                    int = 0;
    anim:                   AnimationRef;
    colliders:              [Collider];
    widget:                 Widget;
    groupIndex:             int;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Render Nodes
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
table Sprite
{
    node:               Node;
    spriteFrameName:    string;
    spriteType:         SpriteType;
    srcBlend:           int = 770;
    dstBlend:           int = 771;
    trimEnabled:        bool = false;
    sizeMode:           SpriteSizeMode;
    fillType:           SpriteFillType;
    fillCenter:         Vec2;
    fillStart:          float;
    fillRange:          float;
    gradient:           Gradient;
}

table Label
{
    node:Node;

    labelText:              string;
    horizontalAlignment:    HorizontalAlignment;
    verticalAlignment:      VerticalAlignment;
    lineHeight:             float;
    fontName:               string;
    fontSize:               float;
    fontType:               FontType;
    overflowType:           LabelOverflowType;
    enableWrap:             bool;
    outline:                LabelOutline;
    shadow:                 LabelShadow;
    gradient:               Gradient;
}

table RichText
{
    node:                   Node;
    text:                   string;
    horizontalAlignment:    HorizontalAlignment;
    fontSize:               float;
    maxWidth:               float;
    lineHeight:             float;
    fontFilename:           string;
    useSystemFont:          bool;
}

table Particle
{
    node:                   Node;
    particleFilename:       string;
    texturePath:            string; // may change the texture dynamically
}


table TileMap
{
    node:Node;
    tmxFilename:string;
    desiredContentSize:Size;
}

table Scene
{
    node:Node;
}

table Prefab
{
    node:Node;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Render Nodes
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
table Button
{
    node:                           Node;
    transition:                     int;
	duration:						float;
    zoomScale:                      float;
	spriteType:						SpriteType;
	trimEnabled:					bool = false;
	backgroundNodeName:				string;
    spriteFrameName:				string;
    pressedSpriteFrameName:			string;
    disabledSpriteFrameName:		string;
    ignoreContentAdaptWithSize:		bool = false;
	normalColor:					ColorRGBA;
    pressedColor:					ColorRGBA;
    disabledColor:					ColorRGBA;
}

table ProgressBar
{
    node:                           Node;
    percent:                        float;
    backgroundSpriteFrameName:      string;
    barSpriteFrameName:             string;
    barSpriteType:                  int;
    reverse:                        bool;
    barPosition:                    Vec3;
    barAnchorPoint:                 Vec2;
    barContentSize:                 Size;
}

table ScrollView
{
    node:                           Node;
    backgroundImage:                string;                         // it is a spriteFrameName
    backgroundImageScale9Enabled:   bool;
    backgroundImageColor:			ColorRGB;
    direction:						ScrollViewDirection;
    bounceEnabled:					bool;
    innerContainerSize:				Size;
	recycleElements:				bool = false;
}

table Widget
{
    isAlignOnce:            bool;
    alignFlags:             int;
    left:                   float;
    right:                  float;
    top:                    float;
    bottom:                 float;
    verticalCenter:         float;
    horizontalCenter:       float;
    isAbsLeft:              bool;
    isAbsRight:             bool;
    isAbsTop:               bool;
    isAbsBottom:            bool;
    isAbsHorizontalCenter:  bool;
    isAbsVerticalCenter:    bool;
}

table Layout
{
    node:                   Node;
    layoutType:             LayoutType;
    resizeMode:             ResizeMode;
    spacingX:               float;
    spacingY:               float;
    affectedByScale:        bool;

    // For Grid Layout
    axisDirection:          AxisDirection;
    cellSize:               Size;

    paddingLeft:            float;
    paddingRight:           float;
    paddingTop:             float;
    paddingBottom:          float;

    // For Vertical Layout
    verticalDirection:      VerticalDirection;

    // For Horizontal Layout
    horizontalDirection:    HorizontalDirection;
}

table EditBox
{
    node:                   Node;
    backgroundImage:        string;
    returnType:             EditBoxReturnType;
    inputFlag:              EditBoxInputFlag;
    inputMode:              EditBoxInputMode;
    fontSize:               int;
    fontColor:              ColorRGB;
    placeholder:            string;
    placeholderFontSize:    int;
    placeholderFontColor:   ColorRGB;
    maxLength:              int;
    text:                   string;
	horizontalAlignment:    HorizontalAlignment;
    verticalAlignment:      VerticalAlignment;
}

table VideoPlayer
{
    node:               Node;
    isLocal:            bool;
    url:                string;
    fullScreen:         bool;
    keepAspect:         bool;
}

table WebView
{
    node:           Node;
    url:            string;
}

table Slider
{
    node:               Node;
    percent:            int;
    barTexturePath:     string;
    barSize:            Size;   // size of bar sprite
    normalTexturePath:  string;
    pressedTexturePath: string;
    disabledTexturePath:string;
    ballSize:           Size;   // size of ball, used to scale normal/pressed/disabled sprite 
}

table Toggle
{
    node:                   Node;
    interactable:           bool;
    enableAutoGrayEffect:   bool;
    isChecked:              bool;
    backgroundSpritePath:   string;
    checkMarkSpritePath:    string;
    zoomScale:              float;
}

table ToggleGroup
{
    node:                   Node;
    allowSwitchOff:         bool;
    toggles:                [Toggle];
}

table Mask
{
    node:Node;
    type:MaskType;
    inverted:bool;
    segments:int;                              // used for Ellipse type
    alphaThreshold:float;                      // used for ImageStencil type
    spriteFrame:string;                        // used for ImageStencil type
}

// Page View

table PageViewIndicator
{
    positionAnchor:     Vec2;
    spriteFrame:        string;
    spriteFrameFromTP:  bool;                    // indicates whether sprite frame from texture packer
    space:              float;
    direction:          int;
}

table PageViewPage
{
    node:Node;
    spriteFrame:string;
    spriteFrameFromTP:bool; 
    scale9Enabled:bool;
}

table PageViewBackground
{
    spriteFrame:string;
    spriteFrameFromTP:bool;
}

table PageView
{
    node:Node;
    inertia:bool;
    bounceEnabled:bool;
    direction:ScrollViewDirection;
    indicator:PageViewIndicator;
    pages:[PageViewPage];
    background:PageViewBackground;
}

table MotionStreak
{
    node:Node;
    timeToFade:float;
    minSeg:float;
    strokeWidth:float;
    strokeColor:ColorRGB;
    texturePath:string;
    fastMode:bool;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Misc Nodes and extensions
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
table SpineSkeleton
{
    node:Node;
    jsonFile:string;
    atlasFile:string;
    defaultSkin:string;
    defaultAnimation:string;
    loop:bool;
    premultipliedAlpha:bool;
    timeScale:float = 1;
    debugSlots:bool = false;
    debugBones:bool = false;
}

// this is part of the Node. It is a reference to
// an existing animation
table AnimationRef
{
    clips:          [string];
    playOnLoad:     bool;
    defaultClip:    string;
}

table Collider
{
    type:ColliderType;
    offset:Vec2;
    size:Size;                      // BoxCollider
    points:[Vec2];                  // PolygonCollider
    radius:float;                   // CircleCollider
}

table DragonBones
{
    node:Node;
    boneDataPath:string;           // dragon bone json file path
    boneDataName:string;
    textureDataPath:string;
    armature:string;
    animation:string;
    timeScale:float;
    playTimes:int;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Structs
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

table LabelOutline
{
    color:ColorRGBA;
    width:float;
}

table LabelShadow
{
    color:      ColorRGBA;
    blurRadius: float;
    offset:     Vec2;
}

table Gradient
{
    startColor: ColorRGBA;
    endColor:   ColorRGBA;
    type:       int;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Root and misc
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//root_type SceneGraph;
root_type NodeGraph;

file_identifier "CCRE";
file_extension "ccreator";
